{"version":3,"file":"static/js/629.136971bc.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/useGetClassName.ts","../node_modules/keycloakify/src/tools/emailRegExp.ts","../node_modules/keycloakify/src/login/lib/useFormValidation.tsx","../node_modules/keycloakify/src/login/lib/useGetClassName.ts","../node_modules/keycloakify/src/tools/Array.prototype.every.ts","../node_modules/keycloakify/src/tools/clsx.ts"],"sourcesContent":["import { clsx } from \"keycloakify/tools/clsx\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\n\nexport function createUseClassName<ClassKey extends string>(params: { defaultClasses: Record<ClassKey, string | undefined> }) {\n    const { defaultClasses } = params;\n\n    function useGetClassName(params: { doUseDefaultCss: boolean; classes: Partial<Record<ClassKey, string>> | undefined }) {\n        const { classes } = params;\n\n        const getClassName = useConstCallback((classKey: ClassKey): string => {\n            return clsx(classKey, defaultClasses[classKey], classes?.[classKey]);\n        });\n\n        return { getClassName };\n    }\n\n    return { useGetClassName };\n}\n","export const emailRegexp =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n","import \"keycloakify/tools/Array.prototype.every\";\nimport { useMemo, useReducer, Fragment } from \"react\";\nimport { id } from \"tsafe/id\";\nimport type { MessageKey } from \"keycloakify/login/i18n/i18n\";\nimport type { Attribute, Validators } from \"keycloakify/login/kcContext/KcContext\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\nimport { emailRegexp } from \"keycloakify/tools/emailRegExp\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\n/**\n * NOTE: The attributesWithPassword returned is actually augmented with\n * artificial password related attributes only if kcContext.passwordRequired === true\n */\nexport function useFormValidation(params: {\n    kcContext: {\n        messagesPerField: Pick<KcContext.Common[\"messagesPerField\"], \"existsError\" | \"get\">;\n        profile: {\n            attributes: Attribute[];\n        };\n        passwordRequired?: boolean;\n        realm: { registrationEmailAsUsername: boolean };\n    };\n    /** NOTE: Try to avoid passing a new ref every render for better performances. */\n    passwordValidators?: Validators;\n    i18n: I18n;\n}) {\n    const { kcContext, passwordValidators = {}, i18n } = params;\n\n    const attributesWithPassword = useMemo(\n        () =>\n            !kcContext.passwordRequired\n                ? kcContext.profile.attributes\n                : (() => {\n                      const name = kcContext.realm.registrationEmailAsUsername ? \"email\" : \"username\";\n\n                      return kcContext.profile.attributes.reduce<Attribute[]>(\n                          (prev, curr) => [\n                              ...prev,\n                              ...(curr.name !== name\n                                  ? [curr]\n                                  : [\n                                        curr,\n                                        id<Attribute>({\n                                            \"name\": \"password\",\n                                            \"displayName\": id<`\\${${MessageKey}}`>(\"${password}\"),\n                                            \"required\": true,\n                                            \"readOnly\": false,\n                                            \"validators\": passwordValidators,\n                                            \"annotations\": {},\n                                            \"groupAnnotations\": {},\n                                            \"autocomplete\": \"new-password\"\n                                        }),\n                                        id<Attribute>({\n                                            \"name\": \"password-confirm\",\n                                            \"displayName\": id<`\\${${MessageKey}}`>(\"${passwordConfirm}\"),\n                                            \"required\": true,\n                                            \"readOnly\": false,\n                                            \"validators\": {\n                                                \"_compareToOther\": {\n                                                    \"name\": \"password\",\n                                                    \"ignore.empty.value\": true,\n                                                    \"shouldBe\": \"equal\",\n                                                    \"error-message\": id<`\\${${MessageKey}}`>(\"${invalidPasswordConfirmMessage}\")\n                                                }\n                                            },\n                                            \"annotations\": {},\n                                            \"groupAnnotations\": {},\n                                            \"autocomplete\": \"new-password\"\n                                        })\n                                    ])\n                          ],\n                          []\n                      );\n                  })(),\n        [kcContext, passwordValidators]\n    );\n\n    const { getErrors } = useGetErrors({\n        \"kcContext\": {\n            \"messagesPerField\": kcContext.messagesPerField,\n            \"profile\": {\n                \"attributes\": attributesWithPassword\n            }\n        },\n        i18n\n    });\n\n    const initialInternalState = useMemo(\n        () =>\n            Object.fromEntries(\n                attributesWithPassword\n                    .map(attribute => ({\n                        attribute,\n                        \"errors\": getErrors({\n                            \"name\": attribute.name,\n                            \"fieldValueByAttributeName\": Object.fromEntries(\n                                attributesWithPassword.map(({ name, value }) => [name, { \"value\": value ?? \"\" }])\n                            )\n                        })\n                    }))\n                    .map(({ attribute, errors }) => [\n                        attribute.name,\n                        {\n                            \"value\": attribute.value ?? \"\",\n                            errors,\n                            \"doDisplayPotentialErrorMessages\": errors.length !== 0\n                        }\n                    ])\n            ),\n        [attributesWithPassword]\n    );\n\n    type InternalState = typeof initialInternalState;\n\n    const [formValidationInternalState, formValidationDispatch] = useReducer(\n        (\n            state: InternalState,\n            params:\n                | {\n                      action: \"update value\";\n                      name: string;\n                      newValue: string;\n                  }\n                | {\n                      action: \"focus lost\";\n                      name: string;\n                  }\n        ): InternalState => ({\n            ...state,\n            [params.name]: {\n                ...state[params.name],\n                ...(() => {\n                    switch (params.action) {\n                        case \"focus lost\":\n                            return { \"doDisplayPotentialErrorMessages\": true };\n                        case \"update value\":\n                            return {\n                                \"value\": params.newValue,\n                                \"errors\": getErrors({\n                                    \"name\": params.name,\n                                    \"fieldValueByAttributeName\": {\n                                        ...state,\n                                        [params.name]: { \"value\": params.newValue }\n                                    }\n                                })\n                            };\n                    }\n                })()\n            }\n        }),\n        initialInternalState\n    );\n\n    const formValidationState = useMemo(\n        () => ({\n            \"fieldStateByAttributeName\": Object.fromEntries(\n                Object.entries(formValidationInternalState).map(([name, { value, errors, doDisplayPotentialErrorMessages }]) => [\n                    name,\n                    { value, \"displayableErrors\": doDisplayPotentialErrorMessages ? errors : [] }\n                ])\n            ),\n            \"isFormSubmittable\": Object.entries(formValidationInternalState).every(\n                ([name, { value, errors }]) =>\n                    errors.length === 0 && (value !== \"\" || !attributesWithPassword.find(attribute => attribute.name === name)!.required)\n            )\n        }),\n        [formValidationInternalState, attributesWithPassword]\n    );\n\n    return {\n        formValidationState,\n        formValidationDispatch,\n        attributesWithPassword\n    };\n}\n\n/** Expect to be used in a component wrapped within a <I18nProvider> */\nfunction useGetErrors(params: {\n    kcContext: {\n        messagesPerField: Pick<KcContext.Common[\"messagesPerField\"], \"existsError\" | \"get\">;\n        profile: {\n            attributes: { name: string; value?: string; validators: Validators }[];\n        };\n    };\n    i18n: I18n;\n}) {\n    const { kcContext, i18n } = params;\n\n    const {\n        messagesPerField,\n        profile: { attributes }\n    } = kcContext;\n\n    const { msg, msgStr, advancedMsg, advancedMsgStr } = i18n;\n\n    const getErrors = useConstCallback((params: { name: string; fieldValueByAttributeName: Record<string, { value: string }> }) => {\n        const { name, fieldValueByAttributeName } = params;\n\n        const { value } = fieldValueByAttributeName[name];\n\n        const { value: defaultValue, validators } = attributes.find(attribute => attribute.name === name)!;\n\n        block: {\n            if ((defaultValue ?? \"\") !== value) {\n                break block;\n            }\n\n            let doesErrorExist: boolean;\n\n            try {\n                doesErrorExist = messagesPerField.existsError(name);\n            } catch {\n                break block;\n            }\n\n            if (!doesErrorExist) {\n                break block;\n            }\n\n            const errorMessageStr = messagesPerField.get(name);\n\n            return [\n                {\n                    \"validatorName\": undefined,\n                    errorMessageStr,\n                    \"errorMessage\": <span key={0}>{errorMessageStr}</span>\n                }\n            ];\n        }\n\n        const errors: {\n            errorMessage: JSX.Element;\n            errorMessageStr: string;\n            validatorName: keyof Validators | undefined;\n        }[] = [];\n\n        scope: {\n            const validatorName = \"length\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (max !== undefined && value.length > parseInt(max)) {\n                const msgArgs = [\"error-invalid-length-too-long\", max] as const;\n\n                errors.push({\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n\n            if (min !== undefined && value.length < parseInt(min)) {\n                const msgArgs = [\"error-invalid-length-too-short\", min] as const;\n\n                errors.push({\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n        }\n\n        scope: {\n            const validatorName = \"_compareToOther\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, name: otherName, shouldBe, \"error-message\": errorMessageKey } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            const { value: otherValue } = fieldValueByAttributeName[otherName];\n\n            const isValid = (() => {\n                switch (shouldBe) {\n                    case \"different\":\n                        return otherValue !== value;\n                    case \"equal\":\n                        return otherValue === value;\n                }\n            })();\n\n            if (isValid) {\n                break scope;\n            }\n\n            const msgArg = [\n                errorMessageKey ??\n                    id<MessageKey>(\n                        (() => {\n                            switch (shouldBe) {\n                                case \"equal\":\n                                    return \"shouldBeEqual\";\n                                case \"different\":\n                                    return \"shouldBeDifferent\";\n                            }\n                        })()\n                    ),\n                otherName,\n                name,\n                shouldBe\n            ] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArg)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArg)\n            });\n        }\n\n        scope: {\n            const validatorName = \"pattern\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, pattern, \"error-message\": errorMessageKey } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (new RegExp(pattern).test(value)) {\n                break scope;\n            }\n\n            const msgArgs = [errorMessageKey ?? id<MessageKey>(\"shouldMatchPattern\"), pattern] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n\n        scope: {\n            if ([...errors].reverse()[0]?.validatorName === \"pattern\") {\n                break scope;\n            }\n\n            const validatorName = \"email\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (emailRegexp.test(value)) {\n                break scope;\n            }\n\n            const msgArgs = [id<MessageKey>(\"invalidEmailMessage\")] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": msgStr(...msgArgs)\n            });\n        }\n\n        scope: {\n            const validatorName = \"integer\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            const intValue = parseInt(value);\n\n            if (isNaN(intValue)) {\n                const msgArgs = [\"mustBeAnInteger\"] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n\n            if (max !== undefined && intValue > parseInt(max)) {\n                const msgArgs = [\"error-number-out-of-range-too-big\", max] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n\n            if (min !== undefined && intValue < parseInt(min)) {\n                const msgArgs = [\"error-number-out-of-range-too-small\", min] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n        }\n\n        scope: {\n            const validatorName = \"options\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            if (value === \"\") {\n                break scope;\n            }\n\n            if (validator.options.indexOf(value) >= 0) {\n                break scope;\n            }\n\n            const msgArgs = [id<MessageKey>(\"notAValidOption\")] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n\n        //TODO: Implement missing validators.\n\n        return errors;\n    });\n\n    return { getErrors };\n}\n","import { createUseClassName } from \"keycloakify/lib/useGetClassName\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\n\nexport const { useGetClassName } = createUseClassName<ClassKey>({\n    \"defaultClasses\": {\n        \"kcBodyClass\": undefined,\n        \"kcHtmlClass\": \"login-pf\",\n        \"kcLoginClass\": \"login-pf-page\",\n        \"kcContentWrapperClass\": \"row\",\n        \"kcHeaderClass\": \"login-pf-page-header\",\n        \"kcHeaderWrapperClass\": undefined,\n        \"kcFormCardClass\": \"card-pf\",\n        \"kcFormCardAccountClass\": \"login-pf-accounts\",\n        \"kcFormSocialAccountClass\": \"login-pf-social-section\",\n        \"kcFormSocialAccountContentClass\": \"col-xs-12 col-sm-6\",\n        \"kcFormHeaderClass\": \"login-pf-header\",\n        \"kcLocaleWrapperClass\": undefined,\n        \"kcFeedbackErrorIcon\": \"pficon pficon-error-circle-o\",\n        \"kcFeedbackWarningIcon\": \"pficon pficon-warning-triangle-o\",\n        \"kcFeedbackSuccessIcon\": \"pficon pficon-ok\",\n        \"kcFeedbackInfoIcon\": \"pficon pficon-info\",\n        \"kcResetFlowIcon\": \"pficon pficon-arrow fa-2x\",\n        \"kcFormGroupClass\": \"form-group\",\n        \"kcLabelWrapperClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcSignUpClass\": \"login-pf-signup\",\n        \"kcInfoAreaWrapperClass\": undefined,\n\n        \"kcLogoClass\": \"login-pf-brand\",\n        \"kcContainerClass\": \"container-fluid\",\n        \"kcContentClass\": \"col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3 col-lg-6 col-lg-offset-3\",\n        \"kcFeedbackAreaClass\": \"col-md-12\",\n        \"kcLocaleClass\": \"col-xs-12 col-sm-1\",\n        \"kcAlertIconClasserror\": \"pficon pficon-error-circle-o\",\n\n        \"kcFormAreaClass\": \"col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\",\n        \"kcFormSocialAccountListClass\": \"login-pf-social list-unstyled login-pf-social-all\",\n        \"kcFormSocialAccountDoubleListClass\": \"login-pf-social-double-col\",\n        \"kcFormSocialAccountListLinkClass\": \"login-pf-social-link\",\n        \"kcWebAuthnKeyIcon\": \"pficon pficon-key\",\n        \"kcWebAuthnDefaultIcon\": \"pficon pficon-key\",\n\n        \"kcFormClass\": \"form-horizontal\",\n        \"kcFormGroupErrorClass\": \"has-error\",\n        \"kcLabelClass\": \"control-label\",\n        \"kcInputClass\": \"form-control\",\n        \"kcInputErrorMessageClass\": \"pf-c-form__helper-text pf-m-error required kc-feedback-text\",\n        \"kcInputWrapperClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormButtonsWrapperClass\": undefined,\n        \"kcFormOptionsClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormButtonsClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormSettingClass\": \"login-pf-settings\",\n        \"kcTextareaClass\": \"form-control\",\n\n        \"kcInfoAreaClass\": \"col-xs-12 col-sm-4 col-md-4 col-lg-5 details\",\n\n        // user-profile grouping\n        \"kcFormGroupHeader\": \"pf-c-form__group\",\n\n        // css classes for form buttons main class used for all buttons\n        \"kcButtonClass\": \"btn\",\n        // classes defining priority of the button - primary or default (there is typically only one priority button for the form)\n        \"kcButtonPrimaryClass\": \"btn-primary\",\n        \"kcButtonDefaultClass\": \"btn-default\",\n        // classes defining size of the button\n        \"kcButtonLargeClass\": \"btn-lg\",\n        \"kcButtonBlockClass\": \"btn-block\",\n\n        // css classes for input\n        \"kcInputLargeClass\": \"input-lg\",\n\n        // css classes for form accessability\n        \"kcSrOnlyClass\": \"sr-only\",\n\n        // css classes for select-authenticator form\n        \"kcSelectAuthListClass\": \"list-group list-view-pf\",\n        \"kcSelectAuthListItemClass\": \"list-group-item list-view-pf-stacked\",\n        \"kcSelectAuthListItemFillClass\": \"pf-l-split__item pf-m-fill\",\n        \"kcSelectAuthListItemIconPropertyClass\": \"fa-2x select-auth-box-icon-properties\",\n        \"kcSelectAuthListItemIconClass\": \"pf-l-split__item select-auth-box-icon\",\n        \"kcSelectAuthListItemTitle\": \"select-auth-box-paragraph\",\n        \"kcSelectAuthListItemInfoClass\": \"list-view-pf-main-info\",\n        \"kcSelectAuthListItemLeftClass\": \"list-view-pf-left\",\n        \"kcSelectAuthListItemBodyClass\": \"list-view-pf-body\",\n        \"kcSelectAuthListItemDescriptionClass\": \"list-view-pf-description\",\n        \"kcSelectAuthListItemHeadingClass\": \"list-group-item-heading\",\n        \"kcSelectAuthListItemHelpTextClass\": \"list-group-item-text\",\n\n        // css classes for the authenticators\n        \"kcAuthenticatorDefaultClass\": \"fa list-view-pf-icon-lg\",\n        \"kcAuthenticatorPasswordClass\": \"fa fa-unlock list-view-pf-icon-lg\",\n        \"kcAuthenticatorOTPClass\": \"fa fa-mobile list-view-pf-icon-lg\",\n        \"kcAuthenticatorWebAuthnClass\": \"fa fa-key list-view-pf-icon-lg\",\n        \"kcAuthenticatorWebAuthnPasswordlessClass\": \"fa fa-key list-view-pf-icon-lg\",\n\n        //css classes for the OTP Login Form\n        \"kcSelectOTPListClass\": \"card-pf card-pf-view card-pf-view-select card-pf-view-single-select\",\n        \"kcSelectOTPListItemClass\": \"card-pf-body card-pf-top-element\",\n        \"kcAuthenticatorOtpCircleClass\": \"fa fa-mobile card-pf-icon-circle\",\n        \"kcSelectOTPItemHeadingClass\": \"card-pf-title text-center\",\n        \"kcFormOptionsWrapperClass\": undefined\n    }\n});\n","if (!Array.prototype.every) {\n    Array.prototype.every = function (callbackfn: any, thisArg: any) {\n        \"use strict\";\n        var T, k;\n\n        if (this == null) {\n            throw new TypeError(\"this is null or not defined\");\n        }\n\n        // 1. Let O be the result of calling ToObject passing the this\n        //    value as the argument.\n        var O = Object(this);\n\n        // 2. Let lenValue be the result of calling the Get internal method\n        //    of O with the argument \"length\".\n        // 3. Let len be ToUint32(lenValue).\n        var len = O.length >>> 0;\n\n        // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n        if (typeof callbackfn !== \"function\" && Object.prototype.toString.call(callbackfn) !== \"[object Function]\") {\n            throw new TypeError();\n        }\n\n        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        if (arguments.length > 1) {\n            T = thisArg;\n        }\n\n        // 6. Let k be 0.\n        k = 0;\n\n        // 7. Repeat, while k < len\n        while (k < len) {\n            var kValue;\n\n            // a. Let Pk be ToString(k).\n            //   This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the HasProperty internal\n            //    method of O with argument Pk.\n            //   This step can be combined with c\n            // c. If kPresent is true, then\n            if (k in O) {\n                var testResult;\n                // i. Let kValue be the result of calling the Get internal method\n                //    of O with argument Pk.\n                kValue = O[k];\n\n                // ii. Let testResult be the result of calling the Call internal method\n                // of callbackfn with T as the this value if T is not undefined\n                // else is the result of calling callbackfn\n                // and argument list containing kValue, k, and O.\n                if (T) testResult = callbackfn.call(T, kValue, k, O);\n                else testResult = callbackfn(kValue, k, O);\n\n                // iii. If ToBoolean(testResult) is false, return false.\n                if (!testResult) {\n                    return false;\n                }\n            }\n            k++;\n        }\n        return true;\n    };\n}\n","import { assert } from \"tsafe/assert\";\nimport { typeGuard } from \"tsafe/typeGuard\";\n\nexport type CxArg = undefined | null | string | boolean | Partial<Record<string, boolean | null | undefined>> | readonly CxArg[];\n\nexport const clsx = (...args: CxArg[]): string => {\n    const len = args.length;\n    let i = 0;\n    let cls = \"\";\n    for (; i < len; i++) {\n        const arg = args[i];\n        if (arg == null) continue;\n\n        let toAdd;\n        switch (typeof arg) {\n            case \"boolean\":\n                break;\n            case \"object\": {\n                if (Array.isArray(arg)) {\n                    toAdd = clsx(...arg);\n                } else {\n                    assert(!typeGuard<{ length: number }>(arg, false));\n\n                    toAdd = \"\";\n                    for (const k in arg) {\n                        if (arg[k as string] && k) {\n                            toAdd && (toAdd += \" \");\n                            toAdd += k;\n                        }\n                    }\n                }\n                break;\n            }\n            default: {\n                toAdd = arg;\n            }\n        }\n        if (toAdd) {\n            cls && (cls += \" \");\n            cls += toAdd;\n        }\n    }\n    return cls;\n};\n"],"names":["createUseClassName","params","defaultClasses","useGetClassName","classes","getClassName","useConstCallback","classKey","clsx","emailRegexp","useFormValidation","kcContext","passwordValidators","i18n","attributesWithPassword","useMemo","passwordRequired","name","realm","registrationEmailAsUsername","profile","attributes","reduce","prev","curr","id","getErrors","messagesPerField","msg","msgStr","advancedMsg","advancedMsgStr","fieldValueByAttributeName","value","defaultValue","validators","find","attribute","block","doesErrorExist","existsError","_b","errorMessageStr","get","undefined","_jsx","children","errors","scope","validatorName","validator","ignoreEmptyValue","max","min","length","parseInt","msgArgs","push","Fragment","otherName","shouldBe","errorMessageKey","otherValue","msgArg","pattern","RegExp","test","_a","reverse","intValue","isNaN","options","indexOf","useGetErrors","initialInternalState","Object","fromEntries","map","_ref","_ref2","formValidationInternalState","formValidationDispatch","useReducer","state","assign","action","newValue","formValidationState","entries","_ref3","doDisplayPotentialErrorMessages","every","_ref4","required","Array","prototype","callbackfn","thisArg","T","k","this","TypeError","O","len","toString","call","arguments","kValue","i","cls","arg","toAdd","isArray","assert","typeGuard"],"sourceRoot":""}