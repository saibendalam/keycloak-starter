{"version":3,"file":"static/js/8509.1add1162.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/login/pages/RegisterUserProfile.tsx","../node_modules/keycloakify/src/login/pages/shared/UserProfileFormFields.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { UserProfileFormFields } from \"./shared/UserProfileFormFields\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function RegisterUserProfile(props: PageProps<Extract<KcContext, { pageId: \"register-user-profile.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey, realm } = kcContext;\n\n    realm.registrationEmailAsUsername;\n\n    const { msg, msgStr } = i18n;\n\n    const [isFormSubmittable, setIsFormSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doUseDefaultCss, classes }}\n            displayMessage={messagesPerField.exists(\"global\")}\n            displayRequiredFields={true}\n            headerNode={msg(\"registerTitle\")}\n        >\n            <form id=\"kc-register-form\" className={getClassName(\"kcFormClass\")} action={url.registrationAction} method=\"post\">\n                <UserProfileFormFields\n                    kcContext={kcContext}\n                    onIsFormSubmittableValueChange={setIsFormSubmittable}\n                    i18n={i18n}\n                    getClassName={getClassName}\n                />\n                {recaptchaRequired && (\n                    <div className=\"form-group\">\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\n                            <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey} />\n                        </div>\n                    </div>\n                )}\n                <div className={getClassName(\"kcFormGroupClass\")} style={{ \"marginBottom\": 30 }}>\n                    <div id=\"kc-form-options\" className={getClassName(\"kcFormOptionsClass\")}>\n                        <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\n                            <span>\n                                <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                            </span>\n                        </div>\n                    </div>\n\n                    <div id=\"kc-form-buttons\" className={getClassName(\"kcFormButtonsClass\")}>\n                        <input\n                            className={clsx(\n                                getClassName(\"kcButtonClass\"),\n                                getClassName(\"kcButtonPrimaryClass\"),\n                                getClassName(\"kcButtonBlockClass\"),\n                                getClassName(\"kcButtonLargeClass\")\n                            )}\n                            type=\"submit\"\n                            value={msgStr(\"doRegister\")}\n                            disabled={!isFormSubmittable}\n                        />\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import { useEffect, Fragment } from \"react\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useFormValidation } from \"keycloakify/login/lib/useFormValidation\";\nimport type { Attribute } from \"keycloakify/login/kcContext/KcContext\";\nimport type { I18n } from \"../../i18n\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"];\n    i18n: I18n;\n    getClassName: (classKey: ClassKey) => string;\n    onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    BeforeField?: (props: { attribute: Attribute }) => JSX.Element | null;\n    AfterField?: (props: { attribute: Attribute }) => JSX.Element | null;\n};\n\nexport function UserProfileFormFields(props: UserProfileFormFieldsProps) {\n    const { kcContext, onIsFormSubmittableValueChange, i18n, getClassName, BeforeField, AfterField } = props;\n\n    const { advancedMsg, msg } = i18n;\n\n    const {\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n        formValidationDispatch,\n        attributesWithPassword\n    } = useFormValidation({\n        kcContext,\n        i18n\n    });\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    let currentGroup = \"\";\n\n    return (\n        <>\n            {attributesWithPassword.map((attribute, i) => {\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                const formGroupClassName = clsx(\n                    getClassName(\"kcFormGroupClass\"),\n                    displayableErrors.length !== 0 && getClassName(\"kcFormGroupErrorClass\")\n                );\n\n                return (\n                    <Fragment key={i}>\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                            <div className={formGroupClassName}>\n                                <div className={getClassName(\"kcContentWrapperClass\")}>\n                                    <label id={`header-${group}`} className={getClassName(\"kcFormGroupHeader\")}>\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\n                                    </label>\n                                </div>\n                                {groupDisplayDescription !== \"\" && (\n                                    <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                        <label id={`description-${group}`} className={getClassName(\"kcLabelClass\")}>\n                                            {advancedMsg(groupDisplayDescription)}\n                                        </label>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n\n                        {BeforeField && <BeforeField attribute={attribute} />}\n\n                        <div className={formGroupClassName}>\n                            <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                <label htmlFor={attribute.name} className={getClassName(\"kcLabelClass\")}>\n                                    {advancedMsg(attribute.displayName ?? \"\")}\n                                </label>\n                                {attribute.required && <>*</>}\n                            </div>\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                {(() => {\n                                    const { options } = attribute.validators;\n\n                                    if (options !== undefined) {\n                                        return (\n                                            <select\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                onChange={event =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"update value\",\n                                                        \"name\": attribute.name,\n                                                        \"newValue\": event.target.value\n                                                    })\n                                                }\n                                                onBlur={() =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"focus lost\",\n                                                        \"name\": attribute.name\n                                                    })\n                                                }\n                                                value={value}\n                                            >\n                                                <>\n                                                    <option value=\"\" selected disabled hidden>\n                                                        {msg(\"selectAnOption\")}\n                                                    </option>\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </>\n                                            </select>\n                                        );\n                                    }\n\n                                    return (\n                                        <input\n                                            type={(() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })()}\n                                            id={attribute.name}\n                                            name={attribute.name}\n                                            value={value}\n                                            onChange={event =>\n                                                formValidationDispatch({\n                                                    \"action\": \"update value\",\n                                                    \"name\": attribute.name,\n                                                    \"newValue\": event.target.value\n                                                })\n                                            }\n                                            onBlur={() =>\n                                                formValidationDispatch({\n                                                    \"action\": \"focus lost\",\n                                                    \"name\": attribute.name\n                                                })\n                                            }\n                                            className={getClassName(\"kcInputClass\")}\n                                            aria-invalid={displayableErrors.length !== 0}\n                                            disabled={attribute.readOnly}\n                                            autoComplete={attribute.autocomplete}\n                                        />\n                                    );\n                                })()}\n                                {displayableErrors.length !== 0 &&\n                                    (() => {\n                                        const divId = `input-error-${attribute.name}`;\n\n                                        return (\n                                            <>\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\n                                                <span\n                                                    id={divId}\n                                                    className={getClassName(\"kcInputErrorMessageClass\")}\n                                                    style={{\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                    }}\n                                                    aria-live=\"polite\"\n                                                >\n                                                    {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                </span>\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                        </div>\n                        {AfterField && <AfterField attribute={attribute} />}\n                    </Fragment>\n                );\n            })}\n        </>\n    );\n}\n"],"names":["RegisterUserProfile","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","url","messagesPerField","recaptchaRequired","recaptchaSiteKey","realm","registrationEmailAsUsername","msg","msgStr","isFormSubmittable","setIsFormSubmittable","useState","_jsx","Object","assign","displayMessage","exists","displayRequiredFields","headerNode","children","_jsxs","id","className","action","registrationAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","style","href","loginUrl","clsx","type","value","disabled","BeforeField","AfterField","advancedMsg","formValidationState","fieldStateByAttributeName","formValidationDispatch","attributesWithPassword","useFormValidation","useEffect","currentGroup","_Fragment","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","name","formGroupClassName","length","Fragment","concat","htmlFor","_a","displayName","required","options","validators","undefined","onChange","event","target","onBlur","selected","hidden","option","readOnly","autoComplete","autocomplete","divId","_ref","errorMessage"],"sourceRoot":""}