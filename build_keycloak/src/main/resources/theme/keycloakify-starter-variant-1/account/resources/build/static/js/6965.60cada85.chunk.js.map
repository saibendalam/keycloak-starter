{"version":3,"file":"static/js/6965.60cada85.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/login/pages/UpdateUserProfile.tsx","../node_modules/keycloakify/src/login/pages/shared/UserProfileFormFields.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { UserProfileFormFields } from \"keycloakify/login/pages/shared/UserProfileFormFields\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function UpdateUserProfile(props: PageProps<Extract<KcContext, { pageId: \"update-user-profile.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { msg, msgStr } = i18n;\n\n    const { url, isAppInitiatedAction } = kcContext;\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template {...{ kcContext, i18n, doUseDefaultCss, classes }} headerNode={msg(\"loginProfileTitle\")}>\n            <form id=\"kc-update-profile-form\" className={getClassName(\"kcFormClass\")} action={url.loginAction} method=\"post\">\n                <UserProfileFormFields\n                    kcContext={kcContext}\n                    onIsFormSubmittableValueChange={setIsFomSubmittable}\n                    i18n={i18n}\n                    getClassName={getClassName}\n                />\n\n                <div className={getClassName(\"kcFormGroupClass\")}>\n                    <div id=\"kc-form-options\" className={getClassName(\"kcFormOptionsClass\")}>\n                        <div className={getClassName(\"kcFormOptionsWrapperClass\")}></div>\n                    </div>\n\n                    <div id=\"kc-form-buttons\" className={getClassName(\"kcFormButtonsClass\")}>\n                        {isAppInitiatedAction ? (\n                            <>\n                                <input\n                                    className={clsx(\n                                        getClassName(\"kcButtonClass\"),\n                                        getClassName(\"kcButtonPrimaryClass\"),\n                                        getClassName(\"kcButtonLargeClass\")\n                                    )}\n                                    type=\"submit\"\n                                    value={msgStr(\"doSubmit\")}\n                                />\n                                <button\n                                    className={clsx(\n                                        getClassName(\"kcButtonClass\"),\n                                        getClassName(\"kcButtonDefaultClass\"),\n                                        getClassName(\"kcButtonLargeClass\")\n                                    )}\n                                    type=\"submit\"\n                                    name=\"cancel-aia\"\n                                    value=\"true\"\n                                    formNoValidate\n                                >\n                                    {msg(\"doCancel\")}\n                                </button>\n                            </>\n                        ) : (\n                            <input\n                                className={clsx(\n                                    getClassName(\"kcButtonClass\"),\n                                    getClassName(\"kcButtonPrimaryClass\"),\n                                    getClassName(\"kcButtonBlockClass\"),\n                                    getClassName(\"kcButtonLargeClass\")\n                                )}\n                                type=\"submit\"\n                                defaultValue={msgStr(\"doSubmit\")}\n                                disabled={!isFomSubmittable}\n                            />\n                        )}\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import { useEffect, Fragment } from \"react\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useFormValidation } from \"keycloakify/login/lib/useFormValidation\";\nimport type { Attribute } from \"keycloakify/login/kcContext/KcContext\";\nimport type { I18n } from \"../../i18n\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"];\n    i18n: I18n;\n    getClassName: (classKey: ClassKey) => string;\n    onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    BeforeField?: (props: { attribute: Attribute }) => JSX.Element | null;\n    AfterField?: (props: { attribute: Attribute }) => JSX.Element | null;\n};\n\nexport function UserProfileFormFields(props: UserProfileFormFieldsProps) {\n    const { kcContext, onIsFormSubmittableValueChange, i18n, getClassName, BeforeField, AfterField } = props;\n\n    const { advancedMsg, msg } = i18n;\n\n    const {\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n        formValidationDispatch,\n        attributesWithPassword\n    } = useFormValidation({\n        kcContext,\n        i18n\n    });\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    let currentGroup = \"\";\n\n    return (\n        <>\n            {attributesWithPassword.map((attribute, i) => {\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                const formGroupClassName = clsx(\n                    getClassName(\"kcFormGroupClass\"),\n                    displayableErrors.length !== 0 && getClassName(\"kcFormGroupErrorClass\")\n                );\n\n                return (\n                    <Fragment key={i}>\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                            <div className={formGroupClassName}>\n                                <div className={getClassName(\"kcContentWrapperClass\")}>\n                                    <label id={`header-${group}`} className={getClassName(\"kcFormGroupHeader\")}>\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\n                                    </label>\n                                </div>\n                                {groupDisplayDescription !== \"\" && (\n                                    <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                        <label id={`description-${group}`} className={getClassName(\"kcLabelClass\")}>\n                                            {advancedMsg(groupDisplayDescription)}\n                                        </label>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n\n                        {BeforeField && <BeforeField attribute={attribute} />}\n\n                        <div className={formGroupClassName}>\n                            <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                <label htmlFor={attribute.name} className={getClassName(\"kcLabelClass\")}>\n                                    {advancedMsg(attribute.displayName ?? \"\")}\n                                </label>\n                                {attribute.required && <>*</>}\n                            </div>\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                {(() => {\n                                    const { options } = attribute.validators;\n\n                                    if (options !== undefined) {\n                                        return (\n                                            <select\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                onChange={event =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"update value\",\n                                                        \"name\": attribute.name,\n                                                        \"newValue\": event.target.value\n                                                    })\n                                                }\n                                                onBlur={() =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"focus lost\",\n                                                        \"name\": attribute.name\n                                                    })\n                                                }\n                                                value={value}\n                                            >\n                                                <>\n                                                    <option value=\"\" selected disabled hidden>\n                                                        {msg(\"selectAnOption\")}\n                                                    </option>\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </>\n                                            </select>\n                                        );\n                                    }\n\n                                    return (\n                                        <input\n                                            type={(() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })()}\n                                            id={attribute.name}\n                                            name={attribute.name}\n                                            value={value}\n                                            onChange={event =>\n                                                formValidationDispatch({\n                                                    \"action\": \"update value\",\n                                                    \"name\": attribute.name,\n                                                    \"newValue\": event.target.value\n                                                })\n                                            }\n                                            onBlur={() =>\n                                                formValidationDispatch({\n                                                    \"action\": \"focus lost\",\n                                                    \"name\": attribute.name\n                                                })\n                                            }\n                                            className={getClassName(\"kcInputClass\")}\n                                            aria-invalid={displayableErrors.length !== 0}\n                                            disabled={attribute.readOnly}\n                                            autoComplete={attribute.autocomplete}\n                                        />\n                                    );\n                                })()}\n                                {displayableErrors.length !== 0 &&\n                                    (() => {\n                                        const divId = `input-error-${attribute.name}`;\n\n                                        return (\n                                            <>\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\n                                                <span\n                                                    id={divId}\n                                                    className={getClassName(\"kcInputErrorMessageClass\")}\n                                                    style={{\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                    }}\n                                                    aria-live=\"polite\"\n                                                >\n                                                    {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                </span>\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                        </div>\n                        {AfterField && <AfterField attribute={attribute} />}\n                    </Fragment>\n                );\n            })}\n        </>\n    );\n}\n"],"names":["UpdateUserProfile","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","msg","msgStr","url","isAppInitiatedAction","isFomSubmittable","setIsFomSubmittable","useState","_jsx","Object","assign","headerNode","children","_jsxs","id","className","action","loginAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","_Fragment","clsx","type","value","name","formNoValidate","defaultValue","disabled","BeforeField","AfterField","advancedMsg","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationDispatch","attributesWithPassword","useFormValidation","useEffect","currentGroup","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","length","Fragment","concat","htmlFor","_a","displayName","required","options","validators","undefined","onChange","event","target","onBlur","selected","hidden","option","readOnly","autoComplete","autocomplete","divId","style","_ref","errorMessage"],"sourceRoot":""}